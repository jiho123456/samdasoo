import streamlit as st
import numpy as np

st.title("Îç∞ÏãúÎ≤® Ï∏°Ï†ïÍ∏∞")

# HTML and JavaScript for audio capture
audio_html = """
<div id="audio-container"></div>
<script>
    const constraints = {
        audio: true,
        video: false
    };
    
    let audioContext;
    let analyser;
    let microphone;
    let javascriptNode;
    let lastDbLevel = 0;
    
    function startAudio() {
        audioContext = new (window.AudioContext || window.webkitAudioContext)();
        analyser = audioContext.createAnalyser();
        analyser.fftSize = 2048;
        
        navigator.mediaDevices.getUserMedia(constraints)
            .then(function(stream) {
                microphone = audioContext.createMediaStreamSource(stream);
                microphone.connect(analyser);
                
                javascriptNode = audioContext.createScriptProcessor(2048, 1, 1);
                analyser.connect(javascriptNode);
                javascriptNode.connect(audioContext.destination);
                
                javascriptNode.onaudioprocess = function() {
                    const array = new Uint8Array(analyser.frequencyBinCount);
                    analyser.getByteFrequencyData(array);
                    const average = array.reduce((a, b) => a + b) / array.length;
                    let db = 20 * Math.log10(average / 255);
                    
                    // FIX 1: Set minimum decibel value to -1
                    db = Math.max(db, -1);
                    
                    // FIX 2: Add 100 to the decibel value to avoid negative numbers
                    const displayDb = db + 100;
                    
                    // Only update if the change is significant
                    if (Math.abs(db - lastDbLevel) > 1) {
                        lastDbLevel = db;
                        // Update the display
                        document.getElementById('audio-container').innerHTML = `
                            <div style="text-align: center;">
                                <h2>${displayDb.toFixed(1)} dB</h2>
                                <div style="width: 100%; height: 20px; background: linear-gradient(to right, 
                                    #4CAF50 0%, 
                                    #FFC107 ${Math.min(displayDb/2, 50)}%, 
                                    #F44336 ${Math.min(displayDb/2, 100)}%); 
                                    border-radius: 10px;">
                                </div>
                                <p style="font-size: 12px; color: gray;">Ïã§Ï†ú dB: ${db.toFixed(1)} (Î≥¥Ï†ïÍ∞í: +100)</p>
                            </div>
                        `;
                        
                        // Send the real dB value to Streamlit
                        if (window.parent && window.parent.Streamlit) {
                            const dbValues = {
                                "real_db": db,
                                "display_db": displayDb
                            };
                            window.parent.Streamlit.setComponentValue(JSON.stringify(dbValues));
                        }
                    }
                };
            })
            .catch(function(err) {
                console.error('Error accessing microphone:', err);
                document.getElementById('audio-container').innerHTML = `
                    <div style="text-align: center; color: red;">
                        ÎßàÏù¥ÌÅ¨ Ï†ëÍ∑º Í∂åÌïúÏùÑ ÌóàÏö©Ìï¥Ï£ºÏÑ∏Ïöî...
                    </div>
                `;
            });
    }
    
    startAudio();
</script>
"""

# Display the audio capture interface with component state
component_value = st.components.v1.html(audio_html, height=150, key="db_meter")

# Extract values from component if available
current_db = -1
display_db = 99  # Default values
if component_value:
    try:
        import json
        values = json.loads(component_value)
        current_db = values.get("real_db", -1)
        display_db = values.get("display_db", 99)
    except:
        pass

# Function to get sound description
def get_sound_description(db_level):
    # Use the real dB level (before +100 adjustment) for descriptions
    if db_level < 20:
        return "üîá Í∑ÄÎ•º Í∏∞Ïö∏Ïó¨Ïïº Îì§Î¶¥ Ï†ïÎèÑÏùò ÏÜåÎ¶¨ (ÎÇòÎ≠áÏûé Î∂ÄÎî™ÌûàÎäî ÏÜåÎ¶¨)"
    elif db_level < 30:
        return "üîà ÏïÑÏ£º Ï°∞Ïö©Ìïú ÏÜåÎ¶¨ (ÏÜçÏÇ≠Ïù¥Îäî ÏÜåÎ¶¨)"
    elif db_level < 40:
        return "üîâ Ï°∞Ïö©Ìïú ÏÜåÎ¶¨ (ÎèÑÏÑúÍ¥Ä ÎÇ¥ ÏÜåÏùå)"
    elif db_level < 50:
        return "üîä Î≥¥ÌÜµ ÏÜåÎ¶¨ (ÏùºÎ∞òÏ†ÅÏù∏ ÎåÄÌôî)"
    elif db_level < 60:
        return "üîä ÏïΩÍ∞Ñ ÌÅ∞ ÏÜåÎ¶¨ (ÏãúÎÅÑÎü¨Ïö¥ Î†àÏä§ÌÜ†Îûë)"
    elif db_level < 70:
        return "üîä ÌÅ∞ ÏÜåÎ¶¨ (Ï†ÑÌôîÎ≤® ÏÜåÎ¶¨)"
    elif db_level < 80:
        return "üîä Îß§Ïö∞ ÌÅ∞ ÏÜåÎ¶¨ (ÏãúÎÅÑÎü¨Ïö¥ Í±∞Î¶¨)"
    elif db_level < 90:
        return "üîä Í∑ÄÍ∞Ä ÏïÑÌîà ÏÜåÎ¶¨ (Ï†ÑÎèô Í≥µÍµ¨ ÏÜåÏùå)"
    elif db_level < 100:
        return "üîä Í∑ÄÍ∞Ä ÏïÑÌîÑÍ≥† ÏúÑÌóòÌïú ÏÜåÎ¶¨ (ÎπÑÌñâÍ∏∞ Ïù¥Î•ô ÏÜåÏùå)"
    else:
        return "üîä Í∑ÄÏóê Ïã¨Í∞ÅÌïú ÏÜêÏÉÅÏùÑ Ï§Ñ Ïàò ÏûàÎäî ÏÜåÎ¶¨ (Ï†úÌä∏Í∏∞ ÏóîÏßÑ ÏÜåÏùå)"

# Display additional information
st.subheader("ÏÜåÎ¶¨ Ï†ïÎ≥¥")
st.write(f"ÌòÑÏû¨ ÏÜåÎ¶¨ ÏàòÏ§Ä: **{display_db:.1f} dB** (Î≥¥Ï†ïÍ∞í: +100)")
st.write(f"Ïã§Ï†ú ÏÜåÎ¶¨ ÏàòÏ§Ä: **{current_db:.1f} dB**")
st.write(get_sound_description(current_db))

# Add explanation about the +100 adjustment
st.info("""
**Ï∞∏Í≥†:** Ïù¥ Ï∏°Ï†ïÍ∏∞Îäî ÏùåÌñ• Ï∏°Ï†ïÍ∞íÏóê +100ÏùÑ ÎçîÌïú Í∞íÏùÑ ÌëúÏãúÌï©ÎãàÎã§. Ïã§Ï†ú Îç∞ÏãúÎ≤® Í∞íÏùÄ ÌëúÏãúÎêú Í∞íÏóêÏÑú 100ÏùÑ Î∫Ä Í∞íÏûÖÎãàÎã§.
ÎòêÌïú Ïõπ ÎßàÏù¥ÌÅ¨Î°ú Ï∏°Ï†ïÌïú Í∞íÏù¥ÎØÄÎ°ú Ï†ïÌôïÌïú Ï∏°Ï†ïÏùÑ ÏúÑÌï¥ÏÑúÎäî Ï†ÑÎ¨∏ Ïû•ÎπÑÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§.
""")

# Add auto-refresh with longer interval to reduce flickering
st_autorefresh = st.empty()
st_autorefresh.code("ÏÜåÏùå Ï∏°Ï†ï Ï§ë...", language=None)



